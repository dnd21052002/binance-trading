import streamlit as st
import asyncio
import threading
import time
from datetime import datetime
import sys
import os

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import c√°c module
from config.config import ConfigManager, TradingConfig
from modules.data_models import DataStore
from modules.binance_connector import BinanceConnector
from modules.technical_analysis import TechnicalAnalyzer
from modules.trading_strategy import TradingStrategy
from ui.components import *
from utils.logger import setup_logger

# Thi·∫øt l·∫≠p logger
logger = setup_logger()

class TradingBot:
    """Main Trading Bot class"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.data_store = DataStore()
        self.binance_connector = BinanceConnector(self.data_store)
        self.technical_analyzer = TechnicalAnalyzer(self.data_store)
        self.trading_strategy = TradingStrategy(self.data_store, self.config_manager, self.technical_analyzer)
        
        self.is_running = False
        self.background_task = None
        self.loop = None
        
    async def start_async(self):
        """Kh·ªüi ƒë·ªông bot async"""
        try:
            await self.binance_connector.start()
            self.is_running = True
            
            # L·∫•y c·∫•u h√¨nh
            trading_config = self.config_manager.get_trading_config()
            symbols = trading_config.tokens
            timeframes = trading_config.timeframes
            
            # Ch·∫°y data fetcher
            await self.binance_connector.run_data_fetcher(symbols, timeframes)
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi ƒë·ªông bot: {e}")
            self.data_store.add_log(f"L·ªói kh·ªüi ƒë·ªông bot: {str(e)}")
    
    def start_background_task(self):
        """Kh·ªüi ƒë·ªông task n·ªÅn"""
        if self.background_task and self.background_task.is_alive():
            return
        
        def run_async_loop():
            try:
                self.loop = asyncio.new_event_loop()
                asyncio.set_event_loop(self.loop)
                self.loop.run_until_complete(self.start_async())
            except Exception as e:
                logger.error(f"L·ªói trong background task: {e}")
            finally:
                if self.loop:
                    self.loop.close()
        
        self.background_task = threading.Thread(target=run_async_loop, daemon=True)
        self.background_task.start()
        self.data_store.add_log("Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông")
    
    def stop(self):
        """D·ª´ng bot"""
        self.is_running = False
        if self.loop:
            asyncio.run_coroutine_threadsafe(self.binance_connector.stop(), self.loop)
        self.data_store.add_log("Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng")
    
    def run_analysis(self):
        """Ch·∫°y ph√¢n t√≠ch v√† t·∫°o ƒë·ªÅ xu·∫•t"""
        try:
            trading_config = self.config_manager.get_trading_config()
            symbols = trading_config.tokens
            trading_mode = trading_config.trading_mode
            
            # Debug log
            self.data_store.add_log(f"üéØ Config hi·ªán t·∫°i - Mode: {trading_mode}, V·ªën: {trading_config.available_capital}")
            
            self.trading_strategy.run_strategy_analysis(symbols, trading_mode)
            
        except Exception as e:
            logger.error(f"L·ªói ch·∫°y ph√¢n t√≠ch: {e}")
            self.data_store.add_log(f"‚ùå L·ªói ph√¢n t√≠ch: {str(e)}")

# Kh·ªüi t·∫°o bot (singleton)
@st.cache_resource
def get_trading_bot():
    return TradingBot()

def main():
    """H√†m main c·ªßa ·ª©ng d·ª•ng Streamlit"""
    
    # Thi·∫øt l·∫≠p page config n·∫øu ch∆∞a c√≥
    try:
        st.set_page_config(
            page_title="Binance Futures AI Bot",
            page_icon="üìà",
            layout="wide",
            initial_sidebar_state="expanded"
        )
    except:
        pass  # Page config ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
    
    # Render header
    st.title("ü§ñ Binance Futures AI Bot")
    st.markdown("---")
    
    # L·∫•y bot instance
    bot = get_trading_bot()
    
    # Hi·ªÉn th·ªã panel th√¥ng tin
    show_info_panel()
    
    # Sidebar controls
    sidebar_action = render_sidebar_controls()
    
    # X·ª≠ l√Ω c√°c action t·ª´ sidebar
    if sidebar_action == "start":
        bot.start_background_task()
        st.success("Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!")
        time.sleep(1)
        st.rerun()
    elif sidebar_action == "stop":
        bot.stop()
        st.success("Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng!")
        time.sleep(1)
        st.rerun()
    elif sidebar_action == "refresh":
        st.rerun()
    
    # Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    is_connected = bot.is_running and bot.binance_connector.session is not None
    render_connection_status(is_connected)
    
    # Hi·ªÉn th·ªã gi√° token
    render_token_watchlist(bot.data_store.current_prices)
    
    st.markdown("---")
    
    # C·∫•u h√¨nh ng∆∞·ªùi d√πng
    config_data = render_user_configuration()
    if config_data:
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh
        new_config = TradingConfig(
            trading_mode=config_data["trading_mode"],
            available_capital=config_data["available_capital"],
            target_profit_per_trade=config_data["target_profit_per_trade"],
            max_loss_per_trade=config_data["max_loss_per_trade"]
        )
        bot.config_manager.update_trading_config(new_config)
        st.success("C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u!")
        time.sleep(1)
        st.rerun()
    
    st.markdown("---")
    
    # T·∫°o 2 c·ªôt ch√≠nh
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # ƒê·ªÅ xu·∫•t giao d·ªãch
        suggestions = bot.data_store.get_latest_suggestions(10)
        render_trading_suggestions(suggestions)
        
        # Th·ªëng k√™
        if suggestions:
            render_statistics(suggestions)
    
    with col2:
        # Logs
        logs = bot.data_store.get_logs(15)
        render_logs(logs)
        
        # N√∫t ch·∫°y ph√¢n t√≠ch th·ªß c√¥ng
        if st.button("üîç Ch·∫°y Ph√¢n t√≠ch", type="secondary"):
            if is_connected:
                bot.run_analysis()
                st.success("ƒê√£ ch·∫°y ph√¢n t√≠ch!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("C·∫ßn kh·ªüi ƒë·ªông bot tr∆∞·ªõc!")
    
    # Footer
    render_footer()
    
    # Auto refresh m·ªói 30 gi√¢y n·∫øu bot ƒëang ch·∫°y
    if bot.is_running:
        time.sleep(30)
        st.rerun()

if __name__ == "__main__":
    # Ch·∫°y ·ª©ng d·ª•ng
    main() 