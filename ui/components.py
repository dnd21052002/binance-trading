import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from typing import List, Dict, Optional
from datetime import datetime

from modules.data_models import TradingSuggestion, TokenPrice

def render_header():
    """Render header c·ªßa ·ª©ng d·ª•ng"""
    st.set_page_config(
        page_title="Binance Futures AI Bot",
        page_icon="üìà",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("ü§ñ Binance Futures AI Bot")
    st.markdown("---")

def render_connection_status(is_connected: bool):
    """Render tr·∫°ng th√°i k·∫øt n·ªëi"""
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.subheader("Tr·∫°ng th√°i k·∫øt n·ªëi")
    
    with col2:
        if is_connected:
            st.success("‚úÖ ƒê√£ k·∫øt n·ªëi Binance")
        else:
            st.error("‚ùå Ch∆∞a k·∫øt n·ªëi Binance")

def render_token_watchlist(prices: Dict[str, TokenPrice]):
    """Render danh s√°ch gi√° token"""
    st.subheader("üìä Gi√° Token Hi·ªán t·∫°i")
    
    if not prices:
        st.info("ƒêang t·∫£i d·ªØ li·ªáu gi√°...")
        return
    
    # T·∫°o 3 c·ªôt cho 3 token
    cols = st.columns(3)
    
    tokens = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
    token_names = {"BTCUSDT": "BTC", "ETHUSDT": "ETH", "SOLUSDT": "SOL"}
    
    for i, token in enumerate(tokens):
        with cols[i]:
            if token in prices:
                price_data = prices[token]
                
                # X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n thay ƒë·ªïi 24h
                color = "green" if price_data.change_24h >= 0 else "red"
                change_symbol = "+" if price_data.change_24h >= 0 else ""
                
                st.metric(
                    label=f"{token_names[token]}/USDT",
                    value=f"${price_data.price:,.2f}",
                    delta=f"{change_symbol}{price_data.change_24h:.2f}%"
                )
            else:
                st.metric(
                    label=f"{token_names[token]}/USDT",
                    value="Loading...",
                    delta=None
                )

def render_user_configuration():
    """Render c·∫•u h√¨nh ng∆∞·ªùi d√πng"""
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh Giao d·ªãch")
    
    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if 'trading_mode' not in st.session_state:
        st.session_state.trading_mode = "Scalp"
    if 'available_capital' not in st.session_state:
        st.session_state.available_capital = 10.0
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # Ch·∫ø ƒë·ªô giao d·ªãch
        current_mode_index = 0 if st.session_state.trading_mode == "Scalp" else 1
        trading_mode = st.radio(
            "Ch·∫ø ƒë·ªô Giao d·ªãch:",
            options=["Scalp", "Swing"],
            index=current_mode_index,
            help="Scalp: Giao d·ªãch ng·∫Øn h·∫°n, l·ª£i nhu·∫≠n nh·ªè, t·∫ßn su·∫•t cao\nSwing: Giao d·ªãch d√†i h·∫°n, l·ª£i nhu·∫≠n l·ªõn, t·∫ßn su·∫•t th·∫•p"
        )
        
        # C·∫≠p nh·∫≠t session state
        st.session_state.trading_mode = trading_mode
        
        # V·ªën kh·∫£ d·ª•ng
        available_capital = st.number_input(
            "V·ªën kh·∫£ d·ª•ng (USDT):",
            min_value=10.0,
            max_value=100000.0,
            value=st.session_state.available_capital,
            step=1.0,
            help="T·ªïng s·ªë v·ªën b·∫°n mu·ªën s·ª≠ d·ª•ng cho bot"
        )
        
        # C·∫≠p nh·∫≠t session state
        st.session_state.available_capital = available_capital
    
    with col2:
        # L·ª£i nhu·∫≠n m·ª•c ti√™u
        if trading_mode == "Scalp":
            default_profit = 3.0
            profit_help = "M·ª•c ti√™u l·ª£i nhu·∫≠n cho m·ªói l·ªánh Scalp (th∆∞·ªùng 3-5 USDT)"
        else:
            default_profit = 10.0
            profit_help = "M·ª•c ti√™u l·ª£i nhu·∫≠n cho m·ªói l·ªánh Swing (th∆∞·ªùng 10-20 USDT)"
        
        target_profit = st.number_input(
            "L·ª£i nhu·∫≠n m·ª•c ti√™u/l·ªánh (USDT):",
            min_value=1.0,
            max_value=100.0,
            value=default_profit,
            step=1.0,
            help=profit_help
        )
        
        # L·ªó t·ªëi ƒëa
        if trading_mode == "Scalp":
            default_loss = 2.0
            loss_help = "M·ª©c l·ªó t·ªëi ƒëa cho m·ªói l·ªánh Scalp (th∆∞·ªùng 1-5 USDT)"
        else:
            default_loss = 5.0
            loss_help = "M·ª©c l·ªó t·ªëi ƒëa cho m·ªói l·ªánh Swing (th∆∞·ªùng 5-10 USDT)"
        
        max_loss = st.number_input(
            "L·ªó t·ªëi ƒëa/l·ªánh (USDT):",
            min_value=1.0,
            max_value=100.0,
            value=default_loss,
            step=1.0,
            help=loss_help
        )
    
    # N√∫t l∆∞u c·∫•u h√¨nh
    if st.button("üíæ L∆∞u C·∫•u h√¨nh", type="primary"):
        return {
            "trading_mode": trading_mode,
            "available_capital": available_capital,
            "target_profit_per_trade": target_profit,
            "max_loss_per_trade": max_loss
        }
    
    return None

def render_trading_suggestions(suggestions: List[TradingSuggestion]):
    """Render b·∫£ng ƒë·ªÅ xu·∫•t giao d·ªãch"""
    st.subheader("üí° ƒê·ªÅ xu·∫•t Giao d·ªãch")
    
    if not suggestions:
        st.info("Ch∆∞a c√≥ ƒë·ªÅ xu·∫•t giao d·ªãch n√†o. ƒêang ph√¢n t√≠ch th·ªã tr∆∞·ªùng...")
        return
    
    # Chuy·ªÉn ƒë·ªïi suggestions th√†nh DataFrame
    data = []
    for suggestion in reversed(suggestions):  # Hi·ªÉn th·ªã m·ªõi nh·∫•t tr∆∞·ªõc
        data.append(suggestion.to_dict())
    
    df = pd.DataFrame(data)
    
    # T√πy ch·ªânh hi·ªÉn th·ªã
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "timestamp": st.column_config.TextColumn("Th·ªùi gian", width="small"),
            "mode": st.column_config.TextColumn("Ch·∫ø ƒë·ªô", width="small"),
            "symbol": st.column_config.TextColumn("Token", width="small"),
            "direction": st.column_config.TextColumn("H∆∞·ªõng", width="small"),
            "entry_price": st.column_config.TextColumn("Entry", width="medium"),
            "stop_loss": st.column_config.TextColumn("SL", width="medium"),
            "take_profit": st.column_config.TextColumn("TP", width="medium"),
            "leverage": st.column_config.TextColumn("Leverage", width="small"),
            "reason": st.column_config.TextColumn("L√Ω do", width="large")
        }
    )

def render_logs(logs: List[str]):
    """Render log messages"""
    st.subheader("üìù Log Ho·∫°t ƒë·ªông")
    
    if not logs:
        st.info("Ch∆∞a c√≥ log n√†o.")
        return
    
    # Hi·ªÉn th·ªã logs trong container c√≥ th·ªÉ scroll
    with st.container():
        # Hi·ªÉn th·ªã logs m·ªõi nh·∫•t tr∆∞·ªõc
        for log in reversed(logs[-10:]):  # Ch·ªâ hi·ªÉn th·ªã 10 log g·∫ßn nh·∫•t
            st.text(log)

def render_price_chart(symbol: str, df: pd.DataFrame):
    """Render bi·ªÉu ƒë·ªì gi√° v·ªõi ch·ªâ b√°o"""
    if df is None or len(df) == 0:
        st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu bi·ªÉu ƒë·ªì cho {symbol}")
        return
    
    # T·∫°o subplot v·ªõi 2 h√†ng
    fig = make_subplots(
        rows=2, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.1,
        subplot_titles=(f'{symbol} Price', 'Volume'),
        row_width=[0.7, 0.3]
    )
    
    # Candlestick chart
    fig.add_trace(
        go.Candlestick(
            x=df['timestamp'],
            open=df['open'],
            high=df['high'],
            low=df['low'],
            close=df['close'],
            name='Price'
        ),
        row=1, col=1
    )
    
    # Volume chart
    fig.add_trace(
        go.Bar(
            x=df['timestamp'],
            y=df['volume'],
            name='Volume',
            marker_color='rgba(158,202,225,0.8)'
        ),
        row=2, col=1
    )
    
    # C·∫≠p nh·∫≠t layout
    fig.update_layout(
        title=f'{symbol} Price Chart',
        yaxis_title='Price (USDT)',
        yaxis2_title='Volume',
        xaxis_rangeslider_visible=False,
        height=600
    )
    
    st.plotly_chart(fig, use_container_width=True)

def render_sidebar_controls():
    """Render c√°c ƒëi·ªÅu khi·ªÉn trong sidebar"""
    st.sidebar.header("üéõÔ∏è ƒêi·ªÅu khi·ªÉn Bot")
    
    # N√∫t b·∫Øt ƒë·∫ßu/d·ª´ng bot
    if st.sidebar.button("üöÄ B·∫Øt ƒë·∫ßu Bot", type="primary"):
        return "start"
    
    if st.sidebar.button("‚èπÔ∏è D·ª´ng Bot"):
        return "stop"
    
    # N√∫t l√†m m·ªõi d·ªØ li·ªáu
    if st.sidebar.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
        return "refresh"
    
    # C√†i ƒë·∫∑t n√¢ng cao
    st.sidebar.header("‚öôÔ∏è C√†i ƒë·∫∑t n√¢ng cao")
    
    # Interval c·∫≠p nh·∫≠t
    update_interval = st.sidebar.slider(
        "Interval c·∫≠p nh·∫≠t (gi√¢y):",
        min_value=10,
        max_value=300,
        value=30,
        step=10
    )
    
    # S·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t hi·ªÉn th·ªã
    max_suggestions = st.sidebar.slider(
        "S·ªë ƒë·ªÅ xu·∫•t hi·ªÉn th·ªã:",
        min_value=5,
        max_value=50,
        value=10,
        step=5
    )
    
    return {
        "update_interval": update_interval,
        "max_suggestions": max_suggestions
    }

def render_statistics(suggestions: List[TradingSuggestion]):
    """Render th·ªëng k√™ ƒë·ªÅ xu·∫•t"""
    if not suggestions:
        return
    
    st.subheader("üìà Th·ªëng k√™")
    
    # T·∫°o 4 c·ªôt cho metrics
    col1, col2, col3, col4 = st.columns(4)
    
    # T·ªïng s·ªë ƒë·ªÅ xu·∫•t
    total_suggestions = len(suggestions)
    
    # ƒê·∫øm theo h∆∞·ªõng
    long_count = sum(1 for s in suggestions if s.direction == "LONG")
    short_count = sum(1 for s in suggestions if s.direction == "SHORT")
    
    # ƒê·∫øm theo ch·∫ø ƒë·ªô
    scalp_count = sum(1 for s in suggestions if s.mode == "Scalp")
    swing_count = sum(1 for s in suggestions if s.mode == "Swing")
    
    with col1:
        st.metric("T·ªïng ƒë·ªÅ xu·∫•t", total_suggestions)
    
    with col2:
        st.metric("LONG", long_count)
    
    with col3:
        st.metric("SHORT", short_count)
    
    with col4:
        st.metric("Scalp/Swing", f"{scalp_count}/{swing_count}")

def show_info_panel():
    """Hi·ªÉn th·ªã panel th√¥ng tin h∆∞·ªõng d·∫´n"""
    with st.expander("‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
        st.markdown("""
        ### C√°ch s·ª≠ d·ª•ng Bot Trading AI:
        
        1. **C·∫•u h√¨nh giao d·ªãch:**
           - Ch·ªçn ch·∫ø ƒë·ªô Scalp (ng·∫Øn h·∫°n) ho·∫∑c Swing (d√†i h·∫°n)
           - Nh·∫≠p v·ªën kh·∫£ d·ª•ng v√† m·ª•c ti√™u l·ª£i nhu·∫≠n/l·ªó
           - Nh·∫•n "L∆∞u c·∫•u h√¨nh"
        
        2. **Kh·ªüi ƒë·ªông bot:**
           - Nh·∫•n "B·∫Øt ƒë·∫ßu Bot" trong sidebar
           - Bot s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† t·∫°o ƒë·ªÅ xu·∫•t
        
        3. **Theo d√µi ƒë·ªÅ xu·∫•t:**
           - Xem c√°c ƒë·ªÅ xu·∫•t giao d·ªãch trong b·∫£ng
           - M·ªói ƒë·ªÅ xu·∫•t bao g·ªìm: Entry, SL, TP, Leverage, L√Ω do
        
        4. **L∆∞u √Ω quan tr·ªçng:**
           - Bot ch·ªâ ƒë∆∞a ra ƒë·ªÅ xu·∫•t, kh√¥ng t·ª± ƒë·ªông giao d·ªãch
           - B·∫°n c·∫ßn t·ª± quy·∫øt ƒë·ªãnh c√≥ th·ª±c hi·ªán giao d·ªãch hay kh√¥ng
           - Lu√¥n qu·∫£n l√Ω r·ªßi ro v√† kh√¥ng ƒë·∫ßu t∆∞ qu√° kh·∫£ nƒÉng ch·ªãu ƒë·ª±ng
        """)
        
        st.warning("‚ö†Ô∏è **Tuy√™n b·ªë mi·ªÖn tr·ª´ tr√°ch nhi·ªám:** Bot n√†y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£ ph√¢n t√≠ch k·ªπ thu·∫≠t. Kh√¥ng ƒë·∫£m b·∫£o l·ª£i nhu·∫≠n v√† m·ªçi r·ªßi ro giao d·ªãch thu·ªôc v·ªÅ ng∆∞·ªùi d√πng.")

def render_footer():
    """Render footer"""
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: gray;'>"
        "Binance Futures AI Bot v1.1 - Ph√°t tri·ªÉn b·ªüi AI Assistant"
        "</div>",
        unsafe_allow_html=True
    ) 